/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var objectKeys = require( '@stdlib/utils/keys' );
var ns = require( './../lib' );

console.log( objectKeys( ns ) );

// Example: Base Utilities
var base = ns.base;

// Convert a number to a signed 32-bit integer:
var int32 = base.toInt32( 3.14 );
console.log( int32 );
// => 3

int32 = base.toInt32( -3.14 );
console.log( int32 );
// => -3

// Bitwise AND of two signed 32-bit integers:
var and = base.and( -1, 3 );
console.log( and );
// => 3

// Bitwise OR of two signed 32-bit integers:
var or = base.or( -1, 3 );
console.log( or );
// => -1

// Bitwise XOR of two signed 32-bit integers:
var xor = base.xor( -1, 3 );
console.log( xor );
// => -4

// Bitwise NOT of a signed 32-bit integer:
var not = base.not( 3 );
console.log( not );
// => -4

// Left shift of a signed 32-bit integer:
var shl = base.shl( 3, 2 );
console.log( shl );
// => 12

// Right shift of a signed 32-bit integer:
var shr = base.shr( 12, 2 );
console.log( shr );
// => 3

// Arithmetic right shift of a signed 32-bit integer:
var ashr = base.ashr( -16, 2 );
console.log( ashr );
// => -4

// Check if a value is a signed 32-bit integer:
var bool = base.isInt32( 3 );
console.log( bool );
// => true

bool = base.isInt32( 3.14 );
console.log( bool );
// => false

bool = base.isInt32( -2147483649 );
console.log( bool );
// => false

bool = base.isInt32( 2147483647 );
console.log( bool );
// => true

// Check if a value is a safe integer:
bool = base.isSafeInteger( 3 );
console.log( bool );
// => true

bool = base.isSafeInteger( Math.pow( 2, 53 ) );
console.log( bool );
// => false

// Convert a value to a safe integer:
var safeInt = base.toSafeInteger( 3.14 );
console.log( safeInt );
// => 3

safeInt = base.toSafeInteger( Math.pow( 2, 53 ) );
console.log( safeInt );
// => 9007199254740991

// Add two signed 32-bit integers:
var sum = base.add( 2147483647, 1 );
console.log( sum );
// => -2147483648 (overflow)

// Subtract two signed 32-bit integers:
var diff = base.sub( -2147483648, 1 );
console.log( diff );
// => 2147483647 (underflow)

// Multiply two signed 32-bit integers:
var prod = base.mul( 10000, 10000 );
console.log( prod );
// => -727379968 (overflow)

// Divide two signed 32-bit integers:
var quot = base.div( 10, 3 );
console.log( quot );
// => 3

// Modulo of two signed 32-bit integers:
var mod = base.mod( 10, 3 );
console.log( mod );
// => 1

// Negate a signed 32-bit integer:
var neg = base.neg( 123 );
console.log( neg );
// => -123

// Using other packages with int32
var round = require( '@stdlib/math/base/special/round' );
var roundedInt32 = base.toInt32( round( 3.75 ) );
console.log( roundedInt32 );
// => 4
